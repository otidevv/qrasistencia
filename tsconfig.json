{
  "compilerOptions": {
    /* Language and Environment */
    "target": "ES2020",                                  /* Set the JavaScript language version for emitted JavaScript */
    "lib": ["ES2020"],                                   /* Specify library files to be included in the compilation */
    
    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated */
    "rootDir": "./src",                                  /* Specify the root folder within your source files */
    "moduleResolution": "node",                          /* Specify how TypeScript looks up a file from a given module specifier */
    "baseUrl": "./",                                     /* Specify the base directory to resolve non-relative module names */
    "paths": {                                           /* Specify a set of entries that re-map imports to additional lookup locations */
      "@/*": ["src/*"],
      "@config/*": ["src/config/*"],
      "@controllers/*": ["src/controllers/*"],
      "@middlewares/*": ["src/middlewares/*"],
      "@services/*": ["src/services/*"],
      "@utils/*": ["src/utils/*"],
      "@types/*": ["src/types/*"]
    },
    "typeRoots": [                                       /* Specify multiple folders that act like './node_modules/@types' */
      "./node_modules/@types",
      "./src/types"
    ],
    "resolveJsonModule": true,                           /* Enable importing .json files */
    "allowJs": false,                                    /* Allow JavaScript files to be a part of your program */
    
    /* Emit */
    "outDir": "./dist",                                  /* Specify an output folder for all emitted files */
    "removeComments": true,                              /* Disable emitting comments */
    "noEmit": false,                                     /* Disable emitting files from a compilation */
    "sourceMap": true,                                   /* Create source map files for emitted JavaScript files */
    "inlineSourceMap": false,                            /* Include sourcemap files inside the emitted JavaScript */
    "declaration": true,                                 /* Generate .d.ts files from TypeScript and JavaScript files in your project */
    "declarationMap": true,                              /* Create sourcemaps for d.ts files */
    "emitDecoratorMetadata": true,                      /* Emit design-type metadata for decorated declarations in source files */
    "experimentalDecorators": true,                      /* Enable experimental support for TC39 stage 2 draft decorators */
    
    /* Interop Constraints */
    "allowSyntheticDefaultImports": true,                /* Allow 'import x from y' when a module doesn't have a default export */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules */
    "forceConsistentCasingInFileNames": true,           /* Ensure that casing is correct in imports */
    
    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options */
    "noImplicitAny": true,                              /* Enable error reporting for expressions and declarations with an implied 'any' type */
    "strictNullChecks": true,                            /* When type checking, take into account 'null' and 'undefined' */
    "strictFunctionTypes": true,                         /* When assigning functions, check to ensure parameters and the return values are subtype-compatible */
    "strictBindCallApply": true,                         /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function */
    "strictPropertyInitialization": true,                /* Check for class properties that are declared but not set in the constructor */
    "noImplicitThis": true,                              /* Enable error reporting when 'this' is given the type 'any' */
    "useUnknownInCatchVariables": false,                /* Default catch clause variables as 'unknown' instead of 'any' */
    "alwaysStrict": true,                                /* Ensure 'use strict' is always emitted */
    "noUnusedLocals": true,                              /* Enable error reporting when local variables aren't read */
    "noUnusedParameters": true,                          /* Raise an error when a function parameter isn't read */
    "exactOptionalPropertyTypes": false,                 /* Interpret optional property types as written, rather than adding 'undefined' */
    "noImplicitReturns": true,                           /* Enable error reporting for codepaths that do not explicitly return in a function */
    "noFallthroughCasesInSwitch": true,                 /* Enable error reporting for fallthrough cases in switch statements */
    "noUncheckedIndexedAccess": false,                  /* Add 'undefined' to a type when accessed using an index */
    "noImplicitOverride": true,                         /* Ensure overriding members in derived classes are marked with an override modifier */
    "noPropertyAccessFromIndexSignature": false,         /* Enforces using indexed accessors for keys declared using an indexed type */
    
    /* Completeness */
    "skipDefaultLibCheck": true,                         /* Skip type checking .d.ts files that are included with TypeScript */
    "skipLibCheck": true,                                /* Skip type checking all .d.ts files */
    
    /* Advanced */
    "incremental": true,                                 /* Save .tsbuildinfo files to allow for incremental compilation of projects */
    "allowUnreachableCode": false,                       /* Disable error reporting for unreachable code */
    "allowUnusedLabels": false                           /* Disable error reporting for unused labels */
  },
  "include": [
    "src/**/*",
    "src/types/**/*.d.ts"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "coverage",
    "tests",
    "**/*.spec.ts",
    "**/*.test.ts"
  ],
  "ts-node": {
    "require": ["tsconfig-paths/register"],
    "transpileOnly": true,
    "files": true
  }
}